(dp1
S'output'
p2
S"<class 'gluon.contrib.pymysql.err.InternalError'> (1071, u'Specified key was too long; max key length is 767 bytes')"
p3
sS'layer'
p4
S'/home/boris/Work/deploy-web2py-local/applications/cpfecys/models/db.py'
p5
sS'code'
p6
S"# -*- coding: utf-8 -*-\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\nif not request.env.web2py_runtime_gae:\n    ## if NOT running on Google App Engine use SQLite or other DB\n    db = DAL('mysql://root@localhost/cpfecys',pool_size=1,check_reserved=['all'])\nelse:\n    ## connect to Google BigTable (optional 'google:datastore://namespace')\n    db = DAL('google:datastore')\n    ## store sessions and tickets there\n    session.connect(request, response, db=db)\n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be 'controller/function.extension'\nresponse.generic_patterns = ['*'] if request.is_local else []\n## (optional) optimize handling of static files\n# response.optimize_css = 'concat,minify,inline'\n# response.optimize_js = 'concat,minify,inline'\n\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Crud, Service, PluginManager, prettydate\nauth = Auth(db)\n\nauth.settings.extra_fields['auth_user']= [\n  Field('carnet', 'string', unique=True),\n  Field('dummyField')]\n\ncrud, service, plugins = Crud(db), Service(), PluginManager()\n\n## create all tables needed by auth if not custom tables\nauth.define_tables(username=False, signature=False, migrate=True)\n\n## Change the display format for a user within this system.\n## Carnet is our best chance for identifying users.\ndb.auth_user._format = '%(carnet)s'\n\n## configure email\nmail = auth.settings.mailer\nmail.settings.server = 'logging' or 'smtp.gmail.com:587'\nmail.settings.sender = 'you@gmail.com'\nmail.settings.login = 'username:password'\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n## if you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, write your domain:api_key in private/janrain.key\nfrom gluon.contrib.login_methods.rpx_account import use_janrain\nuse_janrain(auth, filename='private/janrain.key')\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table('mytable',Field('myfield','string'))\n##\n## Fields can be 'string','text','password','integer','double','boolean'\n##       'date','time','datetime','blob','upload', 'reference TABLENAME'\n## There is an implicit 'id integer autoincrement' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield='value')\n## >>> rows=db(db.mytable.myfield=='value').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\n\n\n# A project contains an N number of cycles\n# still isn't clear if cycles are only meant as 'semester'\ndb.define_table('project',\n                Field('name', 'string'),\n                Field('description', 'text'),\n                Field('cycles', 'integer'),\n                format='%(name)s')\n\n# The relationship between a user and a project contains\n# the history of the final practice, \n# it has the starting cycle and the ending cycle\n# it also is the central key for all operations with interesting data\ndb.define_table('user_project',\n                Field('student', 'reference auth_user'),\n                Field('project', 'reference project'))\n\n## after defining tables, uncomment below to enable auditing\n# auth.enable_record_versioning(db)\n"
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/boris/Work/deploy-web2py-local/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/home/boris/Work/deploy-web2py-local/applications/cpfecys/models/db.py", line 52, in <module>\n    auth.define_tables(username=False, signature=False, migrate=True)\n  File "/home/boris/Work/deploy-web2py-local/gluon/tools.py", line 1736, in define_tables\n    format=\'%(first_name)s %(last_name)s (%(id)s)\'))\n  File "/home/boris/Work/deploy-web2py-local/gluon/dal.py", line 7911, in define_table\n    table = self.lazy_define_table(tablename,*fields,**args)\n  File "/home/boris/Work/deploy-web2py-local/gluon/dal.py", line 7948, in lazy_define_table\n    polymodel=polymodel)\n  File "/home/boris/Work/deploy-web2py-local/gluon/dal.py", line 1029, in create_table\n    fake_migrate=fake_migrate)\n  File "/home/boris/Work/deploy-web2py-local/gluon/dal.py", line 1136, in migrate_table\n    self.execute(sub_query)\n  File "/home/boris/Work/deploy-web2py-local/gluon/dal.py", line 1836, in execute\n    return self.log_execute(*a, **b)\n  File "/home/boris/Work/deploy-web2py-local/gluon/dal.py", line 1830, in log_execute\n    ret = self.cursor.execute(command, *a[1:], **b)\n  File "/home/boris/Work/deploy-web2py-local/gluon/contrib/pymysql/cursors.py", line 117, in execute\n    self.errorhandler(self, exc, value)\n  File "/home/boris/Work/deploy-web2py-local/gluon/contrib/pymysql/connections.py", line 202, in defaulterrorhandler\n    raise errorclass, errorvalue\nInternalError: (1071, u\'Specified key was too long; max key length is 767 bytes\')\n'
p11
s.